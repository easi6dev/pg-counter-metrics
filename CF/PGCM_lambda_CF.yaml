# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Parameters:
  S3Bucket:
    Default: pgcm
    Description: S3 Bucket the hold the PGCM ZIP file 
    Type: String
    AllowedPattern: .*
  S3Key:
    Default: pgcm_<Version Number>.zip
    Description: PGCM ZIP file name
    Type: String
    AllowedPattern: .*          
  DBInstanceIdentifier:
    Default: <DB Instance Identifier>
    Description: Please enter The Database Instance Identifier
    Type: String
    AllowedPattern: .*
  DBResourceID:
    Default: DB-xxxxx
    Description: Please enter the Database Resource ID if you selected IAM DB Authentication type
    Type: String
    AllowedPattern: .*  
  DatabaseUser:
    Default: user_pgcm
    Description: the DB user name that will be used by PGCM to connect to the PG DB [default user name user_pgcm]
    Type: String
    AllowedPattern: .*
  DBEndpoint:
    Default: my-db.XXXXXX.<region>.rds.amazonaws.com
    Description: The Database Endpoint 
    Type: String
    AllowedPattern: .*
  DBPort:
    Default: 5432
    Description: Database Port
    Type: Number
    MinValue: 1024
    MaxValue: 65535
  DatabaseName:
    Default: Database Name
    Description: The Database Name that PGCM will connect to 
    Type: String
    AllowedPattern: .*
  AuthenticationType:
    Default: iamdb
    Description: Please select the Authentication Type [ iamdb or secret_manager or password ]
    Type: String
    AllowedValues:
      - iamdb
      - secret_manager
      - password
  Password:
    Default: N/A
    Description: Please enter the DB user password if you select password or secret_manager for the Authentication type
    Type: String
    AllowedPattern: .*
  LambdaVPCID:
    Description: Choose which VPC the Lambda-functions should be deployed to  
    Type: AWS::EC2::VPC::Id   
  LambdaSecurityGroupID:
    Description: Select the Security Group to use for the Lambda-functions  
    Type: List<AWS::EC2::SecurityGroup::Id>
  LambdaSubnetID:
    Description: Choose which subnets the Lambda-functions should be deployed to 
    Type: List<AWS::EC2::Subnet::Id>
  SchemaList:
    Default: ('schema_1','schema_2')
    Description: Schema List   
    Type: String
    AllowedPattern: .*
  TablesList:
    Default: ('table_1','table_2','table_3')
    Description: Tables list  
    Type: String
    AllowedPattern: .*                           
Conditions:
  AuthenticationTypeisSM: !Equals [ !Ref AuthenticationType, "secret_manager" ]
  AuthenticationTypeisPW: !Equals [ !Ref AuthenticationType, "password" ]
  AuthenticationTypeisIAMDB: !Equals [ !Ref AuthenticationType, "iamdb" ]
  AuthenticationTypeisPwOrIamdb: !Or [ Condition: AuthenticationTypeisPW, Condition: AuthenticationTypeisIAMDB ]
Resources:
  LambdaFunction:
    Type: AWS::Serverless::Function
    Condition: AuthenticationTypeisPwOrIamdb
    Properties:
      FunctionName: !Sub ${DBInstanceIdentifier}_${DatabaseName}_pgcm
      Handler: pgcm.handler
      Runtime: python3.12
      CodeUri: 
        Bucket: !Ref S3Bucket
        Key: !Ref S3Key
      MemorySize: 192
      Timeout: 180
      Tags:
        Name: PGCM
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DB_NAME: !Ref DatabaseName
          DB_USERNAME: !Ref DatabaseUser
          DB_PORT: !Ref DBPort
          RDS_ENDPOINT: !Ref DBEndpoint
          DB_INSTANCE_IDENTIFIER: !Ref DBInstanceIdentifier
          AUTHENTICATION_TYPE: !Ref AuthenticationType
          PASSWORD: !Ref Password
          SCHEMA_LIST: !Ref SchemaList
          TABLES_LIST: !Ref TablesList
      Events:
        Timer:
          Type: Schedule
          Properties:
            Schedule: 'rate(1 minute)'
            Enabled: true
      VpcConfig:
        SecurityGroupIds: !Ref LambdaSecurityGroupID
        SubnetIds: !Ref LambdaSubnetID          
  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Condition: AuthenticationTypeisPwOrIamdb
    Properties:
        RoleName: !Sub pgcm_Lambda_Role_${DBInstanceIdentifier}
        Description: Allows pgcm Lambda functions to connect to RDS PG to collect Counter Metrics and send it to cloud watch
        Path: "/"
        ManagedPolicyArns:
            - "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Sid: "AllowLambdaServiceToAssumeRole"
              Effect: "Allow"
              Action:
                - "sts:AssumeRole"
              Principal:
                Service:
                  - "lambda.amazonaws.com"
        Policies:
          -
            PolicyName: !Sub pgcm_Lambda_Policy_${DBInstanceIdentifier}
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Action:
                    - "cloudwatch:PutMetricData"                    
                  Resource: "*"
                -
                  Effect: "Allow"
                  Action:                
                    - "rds-db:connect"
                  Resource: !Join
                              - ''
                              - - 'arn:aws:rds-db:'
                                - !Ref AWS::Region
                                - ':'
                                - !Ref 'AWS::AccountId'
                                -  ':dbuser:'
                                - !Ref DBResourceID
                                - '/'
                                - !Ref DatabaseUser
  LambdaFunctionSM:
    Type: AWS::Serverless::Function
    Condition: AuthenticationTypeisSM
    Properties:
      FunctionName: !Sub ${DBInstanceIdentifier}_pgcm
      Handler: pgcm.handler
      Runtime: python3.12
      CodeUri: 
        Bucket: !Ref S3Bucket
        Key: !Ref S3Key
      MemorySize: 192
      Timeout: 180
      Tags:
        Name: PGCM
      Role: !GetAtt LambdaExecutionRoleSM.Arn
      Environment:
        Variables:
          DB_NAME: !Ref DatabaseName
          DB_USERNAME: !Ref DatabaseUser
          DB_PORT: !Ref DBPort
          RDS_ENDPOINT: !Ref DBEndpoint
          DB_INSTANCE_IDENTIFIER: !Ref DBInstanceIdentifier
          AUTHENTICATION_TYPE: !Ref AuthenticationType
          SCHEMA_LIST: !Ref SchemaList
          TABLES_LIST: !Ref TablesList
          SECRET_NAME: !Sub pgcm/${DBInstanceIdentifier}
      Events:
        Timer:
          Type: Schedule
          Properties:
            Schedule: 'rate(1 minute)'
            Enabled: true
      VpcConfig:
        SecurityGroupIds: 
          - !Ref LambdaSecurityGroupID
        SubnetIds: !Ref LambdaSubnetID          
  LambdaExecutionRoleSM:
    Type: "AWS::IAM::Role"
    Condition: AuthenticationTypeisSM
    DependsOn: DBSecretsManagerSM
    Properties:
        RoleName: !Sub pgcm_Lambda_Role_${DBInstanceIdentifier}
        Description: Allows pgcm Lambda functions to connect to RDS PG to collect Counter Metrics and send it to cloud watch
        Path: "/"
        ManagedPolicyArns:
            - "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Sid: "AllowLambdaServiceToAssumeRole"
              Effect: "Allow"
              Action:
                - "sts:AssumeRole"
              Principal:
                Service:
                  - "lambda.amazonaws.com"
        Policies:
          -
            PolicyName: !Sub pgcm_Lambda_Policy_${DBInstanceIdentifier}
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Action:
                    - "cloudwatch:PutMetricData"                    
                  Resource: "*"
                -
                  Effect: "Allow"
                  Action:                
                    - "secretsmanager:GetSecretValue"
                  Resource: !Ref DBSecretsManagerSM                              
  DBSecretsManagerSM:
    Type: "AWS::SecretsManager::Secret"
    Condition: AuthenticationTypeisSM
    Properties:
      Name: !Sub pgcm/${DBInstanceIdentifier}
      Description: !Sub "For PGCM access to ${DBInstanceIdentifier} Database"
      SecretString: !Sub '{"username": "${DatabaseUser}","password":"${Password}"}'                                        
